service: tickets-lambdas # AWS names API Gateway based on service name and does not like long names

# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE_EVENTS: ${self:service}-${opt:stage, self:provider.stage}-events
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_EVENTS}"

functions:
  # Web functions
  Web:
    handler: web.handler
    events:
      - http:
          path: /
          method: get

  # API functions
  GetTickets:
    handler: api-get-tickets.handler
    events:
      - http:
          path: api/tickets
          method: get

  GetTicket:
    handler: api-get-ticket.handler
    events:
      - http:
          path: api/tickets/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  CreateTicket:
    handler: api-create-ticket.handler
    events:
      - http:
          path: api/tickets
          method: post

  UpdateTicket:
    handler: api-update-ticket.handler
    events:
      - http:
          path: api/tickets/{id}
          method: put
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    EventsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EVENTS}

plugins:
  - serverless-offline
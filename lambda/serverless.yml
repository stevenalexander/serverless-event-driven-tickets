# TODO replace `stevena` with unique prefix for naming/identifying your deployed resources
service: stevena-tickets # AWS names API Gateway based on service name and does not like long names

# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  apiName: stevena-tickets-gateway # Use a custom name for the API Gateway API
  # deploymentBucket:
  #  name: stevena.tickets.deploys # Deployment bucket name. Default is generated by the framework
  environment:
    DYNAMODB_TABLE_EVENTS: ${self:service}-${opt:stage, self:provider.stage}-events
  iamRoleStatements:
    - Effect: Allow
      Action:
        # dynamodb crud permissions
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # dynamodb stream permissions
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: { Fn::GetAtt: [ EventsDynamoDbTable, Arn ] }


functions:
  # Web functions
  WebGetTickets:
    handler: web-get-tickets.handler
    events:
      - http:
          path: /
          method: get

  WebCreateTicket:
    handler: web-create-ticket.handler
    events:
      - http:
          path: /
          method: post

  # API functions
  GetTickets:
    handler: api-get-tickets.handler
    events:
      - http:
          path: api/tickets
          method: get

  GetTicket:
    handler: api-get-ticket.handler
    events:
      - http:
          path: api/tickets/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  CreateTicket:
    handler: api-create-ticket.handler
    events:
      - http:
          path: api/tickets
          method: post

  UpdateTicket:
    handler: api-update-ticket.handler
    events:
      - http:
          path: api/tickets/{id}
          method: put
          request:
            parameters:
              paths:
                id: true

  # Event processor functions
  EventProcessor:
    handler: event-processor.handler
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [ EventsDynamoDbTable, StreamArn ] }
          batchSize: 1

resources:
  Resources:
    EventsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EVENTS}

plugins:
  - serverless-offline